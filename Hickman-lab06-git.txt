Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```

 Nonso Iwu

    ```


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```
‘git help’ lists common Git commands used in various situations.	

    ```

2.  What does `-ag` cause `git help` to do?

    ```

‘-ag’ causes git help to list all commands (minus the descriptions) and common Git guides

    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    ```

‘git status’ lists untracked files and changed files to be committed.

    ```

2.  What does `git add names.txt` do?

    ```

‘git add names.txt’ adds the file names.txt to the local working directory.

    ```

3.  What does `git commit -m "Add our names."` do?

    ```

‘git commit -m “Add our names.”’ puts the files to be committed on the stage with the commit message “Add our names.”


    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```

‘git add .’ adds all untracked files to the working directory.  The ‘.’ acts as a wildcard for file names.


    ```

5.  What does `git commit` (without -m) do?

    ```
‘git commit’ adds all changed tracked files to the stage and gives you a separate screen with which to add a commit message.


    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```

To write a more detailed commit message, we would use ‘git commit’ because you are able to add a multi-line commit message.

    ```

7.  What does `git log do`?

    ```

‘git log’ shows previous commits, their messages, and their timestamps.

    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```
names.txt
- Files that have been added to the working directory after their last local edit


    ```

    **Unstaged**

    ```
movies.txt
- Files that have been edited locally since the last time they were added to the working directory


    ```

    **Untracked**

    ```
foods.txt
- Files that exist locally, but not in the working directory


    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```

‘git commit’ would commit changes to staged files.

    ```

2.  What command do you run to stage changes?

    ```

‘git add .’ would stage changes.

    ```

3.  What command do you run to unstage changes?

    ```

‘git reset HEAD filename’ would unstage changes.

    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```

‘git diff’ shows the difference between the committed files in the repository and the unstaged local files.

    ```

2.  What does `git diff --cached` display?

    ```
 ‘git diff —cached’ shows the difference between the committed files in the repository and the staged local files.


    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```

‘git reset HEAD names.txt’ & ‘git add movies.txt’

    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```

movies.txt exists as both a staged and unstaged file.  When a file is staged, a copy of it is used.

    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```
names.txt exists as a deleted, unstaged file.  It acknowledges that a file has been deleted.  If we were to commit, it would delete names.txt from the repository.


    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```
Renaming the file treats the original file like it’s been deleted, and the renamed file as entirely new.


    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```
‘git add .’ -> ‘git commit’


    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```

The index/cache/stage holds files that you wish to commit to the repository.

    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```

You may not want to add a file to a shared repository until it is complete.  Also, you may not want to commit it if someone else is committing a file using the same name.

    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```
‘git reset —soft “HEAD^”’ takes away the last commit and returns all files from the last commit to the stage.


    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```
‘git reset —hard “HEAD^” takes away the last commit, but does not return the files to the stage.


    ```

2.  What is the difference between `--hard` and `--soft`?

    ```
‘soft’ keeps the changes to the files on the stage, but ‘hard’ does not keep the previously committed files at all.


    ```

3.  What do you think `HEAD` means?

    ```
HEAD is the original commit.

    ```

4.  What do you think `HEAD^` means?

    ```
HEAD^ is the most recent commit.

    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
